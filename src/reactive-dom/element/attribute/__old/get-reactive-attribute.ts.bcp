import { IObserver } from '@lifaon/rx-js-light';
import { IReactiveAttributeValue } from './reactive-attribute-value.type';
import { getAttributeValue, onAttributeChangeListener } from '../../../light-dom';
import { subscribeOnNodeConnectedTo } from '../../../misc';

export interface IGetReactiveAttributeOptions {
  immediate?: 'no' | 'exclude-null' | 'include-null'; // (default: 'exclude-null')
}

export function getReactiveAttribute(
  emit: IObserver<IReactiveAttributeValue>,
  element: Element,
  name: string,
  {
    immediate = 'exclude-null',
  }: IGetReactiveAttributeOptions = {},
): void {
  subscribeOnNodeConnectedTo(element, onAttributeChangeListener(element, name), emit);
  if (immediate !== 'no') { // TODO dispatch only if node is connected ?
    const value: string | null = getAttributeValue(element, name);
    if (
      (value !== null)
      || (immediate === 'include-null')
    ) {
      emit(value);
    }
  }
}
